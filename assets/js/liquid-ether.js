function LiquidEther(e,t){function i(e){let t;t=Array.isArray(e)&&e.length>0?1===e.length?[e[0],e[0]]:e:["#ffffff","#ffffff"];const i=t.length,s=new Uint8Array(4*i);for(let e=0;e<i;e++){const i=new THREE.Color(t[e]);s[4*e+0]=Math.round(255*i.r),s[4*e+1]=Math.round(255*i.g),s[4*e+2]=Math.round(255*i.b),s[4*e+3]=255}const o=new THREE.DataTexture(s,i,1,THREE.RGBAFormat);return o.magFilter=THREE.LinearFilter,o.minFilter=THREE.LinearFilter,o.wrapS=THREE.ClampToEdgeWrapping,o.wrapT=THREE.ClampToEdgeWrapping,o.generateMipmaps=!1,o.needsUpdate=!0,o}const{mouseForce:s=20,cursorSize:o=100,isViscous:n=!1,viscous:r=30,iterationsViscous:a=32,iterationsPoisson:c=32,dt:u=.014,BFECC:l=!0,resolution:h=.5,isBounce:v=!1,colors:p=["#5227FF","#FF9FFC","#B19EEF"],autoDemo:d=!0,autoSpeed:m=.5,autoIntensity:f=2.2,takeoverDuration:y=.25,autoResumeDelay:E=1e3,autoRampDuration:x=.6}=t;let g=null,w=!0,_=null;const S=i(p),b=new THREE.Vector4(0,0,0,0);class T{constructor(){this.width=0,this.height=0,this.aspect=1,this.pixelRatio=1,this.isMobile=!1,this.breakpoint=768,this.fboWidth=null,this.fboHeight=null,this.time=0,this.delta=0,this.container=null,this.renderer=null,this.clock=null}init(e){this.container=e,this.pixelRatio=Math.min(window.devicePixelRatio||1,2),this.resize(),this.renderer=new THREE.WebGLRenderer({antialias:!0,alpha:!0}),this.renderer.autoClear=!1,this.renderer.setClearColor(new THREE.Color(0),0),this.renderer.setPixelRatio(this.pixelRatio),this.renderer.setSize(this.width,this.height),this.renderer.domElement.style.width="100%",this.renderer.domElement.style.height="100%",this.renderer.domElement.style.display="block",this.clock=new THREE.Clock,this.clock.start()}resize(){if(!this.container)return;const e=this.container.getBoundingClientRect();this.width=Math.max(1,Math.floor(e.width)),this.height=Math.max(1,Math.floor(e.height)),this.aspect=this.width/this.height,this.renderer&&this.renderer.setSize(this.width,this.height,!1)}update(){this.delta=this.clock.getDelta(),this.time+=this.delta}}const R=new T;class D{constructor(){this.mouseMoved=!1,this.coords=new THREE.Vector2,this.coords_old=new THREE.Vector2,this.diff=new THREE.Vector2,this.timer=null,this.container=null,this._onMouseMove=this.onDocumentMouseMove.bind(this),this._onTouchStart=this.onDocumentTouchStart.bind(this),this._onTouchMove=this.onDocumentTouchMove.bind(this),this._onMouseEnter=this.onMouseEnter.bind(this),this._onMouseLeave=this.onMouseLeave.bind(this),this._onTouchEnd=this.onTouchEnd.bind(this),this.isHoverInside=!1,this.hasUserControl=!1,this.isAutoActive=!1,this.autoIntensity=2,this.takeoverActive=!1,this.takeoverStartTime=0,this.takeoverDuration=.25,this.takeoverFrom=new THREE.Vector2,this.takeoverTo=new THREE.Vector2,this.onInteract=null}init(e){this.container=e,e.addEventListener("mousemove",this._onMouseMove,!1),e.addEventListener("touchstart",this._onTouchStart,!1),e.addEventListener("touchmove",this._onTouchMove,!1),e.addEventListener("mouseenter",this._onMouseEnter,!1),e.addEventListener("mouseleave",this._onMouseLeave,!1),e.addEventListener("touchend",this._onTouchEnd,!1)}dispose(){this.container&&(this.container.removeEventListener("mousemove",this._onMouseMove,!1),this.container.removeEventListener("touchstart",this._onTouchStart,!1),this.container.removeEventListener("touchmove",this._onTouchMove,!1),this.container.removeEventListener("mouseenter",this._onMouseEnter,!1),this.container.removeEventListener("mouseleave",this._onMouseLeave,!1),this.container.removeEventListener("touchend",this._onTouchEnd,!1))}setCoords(e,t){if(!this.container)return;this.timer&&clearTimeout(this.timer);const i=this.container.getBoundingClientRect(),s=(e-i.left)/i.width,o=(t-i.top)/i.height;this.coords.set(2*s-1,-(2*o-1)),this.mouseMoved=!0,this.timer=setTimeout((()=>{this.mouseMoved=!1}),100)}setNormalized(e,t){this.coords.set(e,t),this.mouseMoved=!0}onDocumentMouseMove(e){if(this.onInteract&&this.onInteract(),this.isAutoActive&&!this.hasUserControl&&!this.takeoverActive){const t=this.container.getBoundingClientRect(),i=(e.clientX-t.left)/t.width,s=(e.clientY-t.top)/t.height;return this.takeoverFrom.copy(this.coords),this.takeoverTo.set(2*i-1,-(2*s-1)),this.takeoverStartTime=performance.now(),this.takeoverActive=!0,this.hasUserControl=!0,void(this.isAutoActive=!1)}this.setCoords(e.clientX,e.clientY),this.hasUserControl=!0}onDocumentTouchStart(e){if(1===e.touches.length){const t=e.touches[0];this.onInteract&&this.onInteract(),this.setCoords(t.pageX,t.pageY),this.hasUserControl=!0}}onDocumentTouchMove(e){if(1===e.touches.length){const t=e.touches[0];this.onInteract&&this.onInteract(),this.setCoords(t.pageX,t.pageY)}}onTouchEnd(){this.isHoverInside=!1}onMouseEnter(){this.isHoverInside=!0}onMouseLeave(){this.isHoverInside=!1}update(){if(this.takeoverActive){const e=(performance.now()-this.takeoverStartTime)/(1e3*this.takeoverDuration);if(e>=1)this.takeoverActive=!1,this.coords.copy(this.takeoverTo),this.coords_old.copy(this.coords),this.diff.set(0,0);else{const t=e*e*(3-2*e);this.coords.copy(this.takeoverFrom).lerp(this.takeoverTo,t)}}this.diff.subVectors(this.coords,this.coords_old),this.coords_old.copy(this.coords),0===this.coords_old.x&&0===this.coords_old.y&&this.diff.set(0,0),this.isAutoActive&&!this.takeoverActive&&this.diff.multiplyScalar(this.autoIntensity)}}const M=new D;class H{constructor(e,t,i){this.mouse=e,this.manager=t,this.enabled=i.enabled,this.speed=i.speed,this.resumeDelay=i.resumeDelay||3e3,this.rampDurationMs=1e3*(i.rampDuration||0),this.active=!1,this.current=new THREE.Vector2(0,0),this.target=new THREE.Vector2,this.lastTime=performance.now(),this.activationTime=0,this.margin=.2,this._tmpDir=new THREE.Vector2,this.pickNewTarget()}pickNewTarget(){const e=Math.random;this.target.set((2*e()-1)*(1-this.margin),(2*e()-1)*(1-this.margin))}forceStop(){this.active=!1,this.mouse.isAutoActive=!1}update(){if(!this.enabled)return;const e=performance.now();if(e-this.manager.lastUserInteraction<this.resumeDelay)return void(this.active&&this.forceStop());if(this.mouse.isHoverInside)return void(this.active&&this.forceStop());if(this.active||(this.active=!0,this.current.copy(this.mouse.coords),this.lastTime=e,this.activationTime=e),!this.active)return;this.mouse.isAutoActive=!0;let t=(e-this.lastTime)/1e3;this.lastTime=e,t>.2&&(t=.016);const i=this._tmpDir.subVectors(this.target,this.current),s=i.length();if(s<.01)return void this.pickNewTarget();i.normalize();let o=1;if(this.rampDurationMs>0){const t=Math.min(1,(e-this.activationTime)/this.rampDurationMs);o=t*t*(3-2*t)}const n=this.speed*t*o,r=Math.min(n,s);this.current.addScaledVector(i,r),this.mouse.setNormalized(this.current.x,this.current.y)}}const C="\nattribute vec3 position;\nuniform vec2 px;\nuniform vec2 boundarySpace;\nvarying vec2 uv;\nprecision highp float;\nvoid main(){\nvec3 pos = position;\nvec2 scale = 1.0 - boundarySpace * 2.0;\npos.xy = pos.xy * scale;\nuv = vec2(0.5)+(pos.xy)*0.5;\ngl_Position = vec4(pos, 1.0);\n}\n",z="\nattribute vec3 position;\nuniform vec2 px;\nprecision highp float;\nvarying vec2 uv;\nvoid main(){\nvec3 pos = position;\nuv = 0.5 + pos.xy * 0.5;\nvec2 n = sign(pos.xy);\npos.xy = abs(pos.xy) - px * 1.0;\npos.xy *= n;\ngl_Position = vec4(pos, 1.0);\n}\n",F="\n  precision highp float;\n  attribute vec3 position;\n  attribute vec2 uv;\n  uniform vec2 center;\n  uniform vec2 scale;\n  uniform vec2 px;\n  varying vec2 vUv;\n  void main(){\n  vec2 pos = position.xy * scale * 2.0 * px + center;\n  vUv = uv;\n  gl_Position = vec4(pos, 0.0, 1.0);\n}\n",A="\n  precision highp float;\n  uniform sampler2D velocity;\n  uniform float dt;\n  uniform bool isBFECC;\n  uniform vec2 fboSize;\n  uniform vec2 px;\n  varying vec2 uv;\n  void main(){\n  vec2 ratio = max(fboSize.x, fboSize.y) / fboSize;\n  if(isBFECC == false){\n      vec2 vel = texture2D(velocity, uv).xy;\n      vec2 uv2 = uv - vel * dt * ratio;\n      vec2 newVel = texture2D(velocity, uv2).xy;\n      gl_FragColor = vec4(newVel, 0.0, 0.0);\n  } else {\n      vec2 spot_new = uv;\n      vec2 vel_old = texture2D(velocity, uv).xy;\n      vec2 spot_old = spot_new - vel_old * dt * ratio;\n      vec2 vel_new1 = texture2D(velocity, spot_old).xy;\n      vec2 spot_new2 = spot_old + vel_new1 * dt * ratio;\n      vec2 error = spot_new2 - spot_new;\n      vec2 spot_new3 = spot_new - error / 2.0;\n      vec2 vel_2 = texture2D(velocity, spot_new3).xy;\n      vec2 spot_old2 = spot_new3 - vel_2 * dt * ratio;\n      vec2 newVel2 = texture2D(velocity, spot_old2).xy; \n      gl_FragColor = vec4(newVel2, 0.0, 0.0);\n  }\n}\n",B="\n  precision highp float;\n  uniform sampler2D velocity;\n  uniform sampler2D palette;\n  uniform vec4 bgColor;\n  varying vec2 uv;\n  void main(){\n  vec2 vel = texture2D(velocity, uv).xy;\n  float lenv = clamp(length(vel), 0.0, 1.0);\n  vec3 c = texture2D(palette, vec2(lenv, 0.5)).rgb;\n  vec3 outRGB = mix(bgColor.rgb, c, lenv);\n  float outA = mix(bgColor.a, 1.0, lenv);\n  gl_FragColor = vec4(outRGB, outA);\n}\n",k="\n  precision highp float;\n  uniform sampler2D velocity;\n  uniform float dt;\n  uniform vec2 px;\n  varying vec2 uv;\n  void main(){\n  float x0 = texture2D(velocity, uv-vec2(px.x, 0.0)).x;\n  float x1 = texture2D(velocity, uv+vec2(px.x, 0.0)).x;\n  float y0 = texture2D(velocity, uv-vec2(0.0, px.y)).y;\n  float y1 = texture2D(velocity, uv+vec2(0.0, px.y)).y;\n  float divergence = (x1 - x0 + y1 - y0) / 2.0;\n  gl_FragColor = vec4(divergence / dt);\n}\n",V="\n  precision highp float;\n  uniform vec2 force;\n  uniform vec2 center;\n  uniform vec2 scale;\n  uniform vec2 px;\n  varying vec2 vUv;\n  void main(){\n  vec2 circle = (vUv - 0.5) * 2.0;\n  float d = 1.0 - min(length(circle), 1.0);\n  d *= d;\n  gl_FragColor = vec4(force * d, 0.0, 1.0);\n}\n",L="\n  precision highp float;\n  uniform sampler2D pressure;\n  uniform sampler2D divergence;\n  uniform vec2 px;\n  varying vec2 uv;\n  void main(){\n  float p0 = texture2D(pressure, uv + vec2(px.x * 2.0, 0.0)).r;\n  float p1 = texture2D(pressure, uv - vec2(px.x * 2.0, 0.0)).r;\n  float p2 = texture2D(pressure, uv + vec2(0.0, px.y * 2.0)).r;\n  float p3 = texture2D(pressure, uv - vec2(0.0, px.y * 2.0)).r;\n  float div = texture2D(divergence, uv).r;\n  float newP = (p0 + p1 + p2 + p3) / 4.0 - div;\n  gl_FragColor = vec4(newP);\n}\n",I="\n  precision highp float;\n  uniform sampler2D pressure;\n  uniform sampler2D velocity;\n  uniform vec2 px;\n  uniform float dt;\n  varying vec2 uv;\n  void main(){\n  float step = 1.0;\n  float p0 = texture2D(pressure, uv + vec2(px.x * step, 0.0)).r;\n  float p1 = texture2D(pressure, uv - vec2(px.x * step, 0.0)).r;\n  float p2 = texture2D(pressure, uv + vec2(0.0, px.y * step)).r;\n  float p3 = texture2D(pressure, uv - vec2(0.0, px.y * step)).r;\n  vec2 v = texture2D(velocity, uv).xy;\n  vec2 gradP = vec2(p0 - p1, p2 - p3) * 0.5;\n  v = v - gradP * dt;\n  gl_FragColor = vec4(v, 0.0, 1.0);\n}\n",P="\n  precision highp float;\n  uniform sampler2D velocity;\n  uniform sampler2D velocity_new;\n  uniform float v;\n  uniform vec2 px;\n  uniform float dt;\n  varying vec2 uv;\n  void main(){\n  vec2 old = texture2D(velocity, uv).xy;\n  vec2 new0 = texture2D(velocity_new, uv + vec2(px.x * 2.0, 0.0)).xy;\n  vec2 new1 = texture2D(velocity_new, uv - vec2(px.x * 2.0, 0.0)).xy;\n  vec2 new2 = texture2D(velocity_new, uv + vec2(0.0, px.y * 2.0)).xy;\n  vec2 new3 = texture2D(velocity_new, uv - vec2(0.0, px.y * 2.0)).xy;\n  vec2 newv = 4.0 * old + v * dt * (new0 + new1 + new2 + new3);\n  newv /= 4.0 * (1.0 + v * dt);\n  gl_FragColor = vec4(newv, 0.0, 0.0);\n}\n";class U{constructor(e){this.props=e||{},this.uniforms=this.props.material?.uniforms,this.scene=null,this.camera=null,this.material=null,this.geometry=null,this.plane=null}init(){this.scene=new THREE.Scene,this.camera=new THREE.Camera,this.uniforms&&(this.material=new THREE.RawShaderMaterial(this.props.material),this.geometry=new THREE.PlaneGeometry(2,2),this.plane=new THREE.Mesh(this.geometry,this.material),this.scene.add(this.plane))}update(){R.renderer.setRenderTarget(this.props.output||null),R.renderer.render(this.scene,this.camera),R.renderer.setRenderTarget(null)}}class G extends U{constructor(e){super({material:{vertexShader:C,fragmentShader:A,uniforms:{boundarySpace:{value:e.cellScale},px:{value:e.cellScale},fboSize:{value:e.fboSize},velocity:{value:e.src.texture},dt:{value:e.dt},isBFECC:{value:!0}}},output:e.dst}),this.uniforms=this.props.material.uniforms,this.init()}init(){super.init(),this.createBoundary()}createBoundary(){const e=new THREE.BufferGeometry,t=new Float32Array([-1,-1,0,-1,1,0,-1,1,0,1,1,0,1,1,0,1,-1,0,1,-1,0,-1,-1,0]);e.setAttribute("position",new THREE.BufferAttribute(t,3));const i=new THREE.RawShaderMaterial({vertexShader:z,fragmentShader:A,uniforms:this.uniforms});this.line=new THREE.LineSegments(e,i),this.scene.add(this.line)}update({dt:e,isBounce:t,BFECC:i}){this.uniforms.dt.value=e,this.line.visible=t,this.uniforms.isBFECC.value=i,super.update()}}class W extends U{constructor(e){super({output:e.dst}),this.init(e)}init(e){super.init();const t=new THREE.PlaneGeometry(1,1),i=new THREE.RawShaderMaterial({vertexShader:F,fragmentShader:V,blending:THREE.AdditiveBlending,depthWrite:!1,uniforms:{px:{value:e.cellScale},force:{value:new THREE.Vector2(0,0)},center:{value:new THREE.Vector2(0,0)},scale:{value:new THREE.Vector2(e.cursor_size,e.cursor_size)}}});this.mouse=new THREE.Mesh(t,i),this.scene.add(this.mouse)}update(e){const t=M.diff.x/2*e.mouse_force,i=M.diff.y/2*e.mouse_force,s=e.cursor_size*e.cellScale.x,o=e.cursor_size*e.cellScale.y,n=Math.min(Math.max(M.coords.x,-1+s+2*e.cellScale.x),1-s-2*e.cellScale.x),r=Math.min(Math.max(M.coords.y,-1+o+2*e.cellScale.y),1-o-2*e.cellScale.y),a=this.mouse.material.uniforms;a.force.value.set(t,i),a.center.value.set(n,r),a.scale.value.set(e.cursor_size,e.cursor_size),super.update()}}class N extends U{constructor(e){super({material:{vertexShader:C,fragmentShader:P,uniforms:{boundarySpace:{value:e.boundarySpace},velocity:{value:e.src.texture},velocity_new:{value:e.dst_.texture},v:{value:e.viscous},px:{value:e.cellScale},dt:{value:e.dt}}},output:e.dst,output0:e.dst_,output1:e.dst}),this.init()}update({viscous:e,iterations:t,dt:i}){let s,o;this.uniforms.v.value=e;for(let e=0;e<t;e++)e%2==0?(s=this.props.output0,o=this.props.output1):(s=this.props.output1,o=this.props.output0),this.uniforms.velocity_new.value=s.texture,this.props.output=o,this.uniforms.dt.value=i,super.update();return o}}class O extends U{constructor(e){super({material:{vertexShader:C,fragmentShader:k,uniforms:{boundarySpace:{value:e.boundarySpace},velocity:{value:e.src.texture},px:{value:e.cellScale},dt:{value:e.dt}}},output:e.dst}),this.init()}update({vel:e}){this.uniforms.velocity.value=e.texture,super.update()}}class q extends U{constructor(e){super({material:{vertexShader:C,fragmentShader:L,uniforms:{boundarySpace:{value:e.boundarySpace},pressure:{value:e.dst_.texture},divergence:{value:e.src.texture},px:{value:e.cellScale}}},output:e.dst,output0:e.dst_,output1:e.dst}),this.init()}update({iterations:e}){let t,i;for(let s=0;s<e;s++)s%2==0?(t=this.props.output0,i=this.props.output1):(t=this.props.output1,i=this.props.output0),this.uniforms.pressure.value=t.texture,this.props.output=i,super.update();return i}}class X extends U{constructor(e){super({material:{vertexShader:C,fragmentShader:I,uniforms:{boundarySpace:{value:e.boundarySpace},pressure:{value:e.src_p.texture},velocity:{value:e.src_v.texture},px:{value:e.cellScale},dt:{value:e.dt}}},output:e.dst}),this.init()}update({vel:e,pressure:t}){this.uniforms.velocity.value=e.texture,this.uniforms.pressure.value=t.texture,super.update()}}class Y{constructor(e){this.options={iterations_poisson:32,iterations_viscous:32,mouse_force:20,resolution:.5,cursor_size:100,viscous:30,isBounce:!1,dt:.014,isViscous:!1,BFECC:!0,...e},this.fbos={vel_0:null,vel_1:null,vel_viscous0:null,vel_viscous1:null,div:null,pressure_0:null,pressure_1:null},this.fboSize=new THREE.Vector2,this.cellScale=new THREE.Vector2,this.boundarySpace=new THREE.Vector2,this.init()}init(){this.calcSize(),this.createAllFBO(),this.createShaderPass()}getFloatType(){return/(iPad|iPhone|iPod)/i.test(navigator.userAgent)?THREE.HalfFloatType:THREE.FloatType}createAllFBO(){const e={type:this.getFloatType(),depthBuffer:!1,stencilBuffer:!1,minFilter:THREE.LinearFilter,magFilter:THREE.LinearFilter,wrapS:THREE.ClampToEdgeWrapping,wrapT:THREE.ClampToEdgeWrapping};for(let t in this.fbos)this.fbos[t]=new THREE.WebGLRenderTarget(this.fboSize.x,this.fboSize.y,e)}createShaderPass(){this.advection=new G({cellScale:this.cellScale,fboSize:this.fboSize,dt:this.options.dt,src:this.fbos.vel_0,dst:this.fbos.vel_1}),this.externalForce=new W({cellScale:this.cellScale,cursor_size:this.options.cursor_size,dst:this.fbos.vel_1}),this.viscous=new N({cellScale:this.cellScale,boundarySpace:this.boundarySpace,viscous:this.options.viscous,src:this.fbos.vel_1,dst:this.fbos.vel_viscous1,dst_:this.fbos.vel_viscous0,dt:this.options.dt}),this.divergence=new O({cellScale:this.cellScale,boundarySpace:this.boundarySpace,src:this.fbos.vel_viscous0,dst:this.fbos.div,dt:this.options.dt}),this.poisson=new q({cellScale:this.cellScale,boundarySpace:this.boundarySpace,src:this.fbos.div,dst:this.fbos.pressure_1,dst_:this.fbos.pressure_0}),this.pressure=new X({cellScale:this.cellScale,boundarySpace:this.boundarySpace,src_p:this.fbos.pressure_0,src_v:this.fbos.vel_viscous0,dst:this.fbos.vel_0,dt:this.options.dt})}calcSize(){const e=Math.max(1,Math.round(this.options.resolution*R.width)),t=Math.max(1,Math.round(this.options.resolution*R.height)),i=1/e,s=1/t;this.cellScale.set(i,s),this.fboSize.set(e,t)}resize(){this.calcSize();for(let e in this.fbos)this.fbos[e].setSize(this.fboSize.x,this.fboSize.y)}update(){this.options.isBounce?this.boundarySpace.set(0,0):this.boundarySpace.copy(this.cellScale),this.advection.update({dt:this.options.dt,isBounce:this.options.isBounce,BFECC:this.options.BFECC}),this.externalForce.update({cursor_size:this.options.cursor_size,mouse_force:this.options.mouse_force,cellScale:this.cellScale});let e=this.fbos.vel_1;this.options.isViscous&&(e=this.viscous.update({viscous:this.options.viscous,iterations:this.options.iterations_viscous,dt:this.options.dt})),this.divergence.update({vel:e});const t=this.poisson.update({iterations:this.options.iterations_poisson});this.pressure.update({vel:e,pressure:t})}}class ${constructor(){this.init()}init(){this.simulation=new Y,this.scene=new THREE.Scene,this.camera=new THREE.Camera,this.output=new THREE.Mesh(new THREE.PlaneGeometry(2,2),new THREE.RawShaderMaterial({vertexShader:C,fragmentShader:B,transparent:!0,depthWrite:!1,uniforms:{velocity:{value:this.simulation.fbos.vel_0.texture},boundarySpace:{value:new THREE.Vector2},palette:{value:S},bgColor:{value:b}}})),this.scene.add(this.output)}addScene(e){this.scene.add(e)}resize(){this.simulation.resize()}render(){R.renderer.setRenderTarget(null),R.renderer.render(this.scene,this.camera)}update(){this.simulation.update(),this.render()}}class j{constructor(e){this.props=e,R.init(e.$wrapper),M.init(e.$wrapper),M.autoIntensity=e.autoIntensity,M.takeoverDuration=e.takeoverDuration,this.lastUserInteraction=performance.now(),M.onInteract=()=>{this.lastUserInteraction=performance.now(),this.autoDriver&&this.autoDriver.forceStop()},this.autoDriver=new H(M,this,{enabled:e.autoDemo,speed:e.autoSpeed,resumeDelay:e.autoResumeDelay,rampDuration:e.autoRampDuration}),this.init(),this._loop=this.loop.bind(this),this._resize=this.resize.bind(this),window.addEventListener("resize",this._resize),this._onVisibility=()=>{document.hidden?this.pause():w&&this.start()},document.addEventListener("visibilitychange",this._onVisibility),this.running=!1}init(){this.props.$wrapper.prepend(R.renderer.domElement),this.output=new $}resize(){R.resize(),this.output.resize()}render(){this.autoDriver&&this.autoDriver.update(),M.update(),R.update(),this.output.update()}loop(){this.running&&(this.render(),g=requestAnimationFrame(this._loop))}start(){this.running||(this.running=!0,this._loop())}pause(){this.running=!1,g&&(cancelAnimationFrame(g),g=null)}dispose(){try{if(window.removeEventListener("resize",this._resize),document.removeEventListener("visibilitychange",this._onVisibility),M.dispose(),R.renderer){const e=R.renderer.domElement;e&&e.parentNode&&e.parentNode.removeChild(e),R.renderer.dispose()}}catch(e){}}}e.style.position=e.style.position||"relative",e.style.overflow=e.style.overflow||"hidden";const J=new j({$wrapper:e,autoDemo:d,autoSpeed:m,autoIntensity:f,takeoverDuration:y,autoResumeDelay:E,autoRampDuration:x}),K=J.output?.simulation;K&&Object.assign(K.options,{mouse_force:s,cursor_size:o,isViscous:n,viscous:r,iterations_viscous:a,iterations_poisson:c,dt:u,BFECC:l,resolution:h,isBounce:v}),J.start();const Q=new IntersectionObserver((e=>{const t=e[0],i=t.isIntersecting&&t.intersectionRatio>0;w=i,i&&!document.hidden?J.start():J.pause()}),{threshold:[0,.01,.1]});Q.observe(e);const Z=new ResizeObserver((()=>{_&&cancelAnimationFrame(_),_=requestAnimationFrame((()=>{J.resize()}))}));return Z.observe(e),{destroy:()=>{g&&cancelAnimationFrame(g);try{Z.disconnect()}catch(e){}try{Q.disconnect()}catch(e){}J.dispose()}}}import*as THREE from"three";export default LiquidEther;